var detail_json="[]"
var original_json="[]"
var detail_title_info="{\"88\":{\"score\":100},\"89\":{\"score\":100},\"190\":{\"score\":100},\"191\":{\"score\":100},\"192\":{\"score\":100},\"194\":{\"score\":100},\"195\":{\"score\":100},\"196\":{\"score\":100},\"197\":{\"score\":100},\"110\":{\"score\":100},\"198\":{\"score\":100},\"231\":{\"score\":75},\"111\":{\"score\":100},\"199\":{\"score\":100},\"232\":{\"score\":98},\"112\":{\"score\":100},\"113\":{\"score\":100},\"234\":{\"score\":59},\"235\":{\"score\":57},\"116\":{\"score\":100},\"117\":{\"score\":94},\"239\":{\"score\":61},\"119\":{\"score\":100},\"93\":{\"score\":100},\"94\":{\"score\":100},\"95\":{\"score\":100},\"97\":{\"score\":100},\"98\":{\"score\":100},\"99\":{\"score\":100},\"240\":{\"score\":90},\"120\":{\"score\":100},\"241\":{\"score\":85},\"121\":{\"score\":89},\"242\":{\"score\":97},\"122\":{\"score\":97},\"123\":{\"score\":100},\"244\":{\"score\":100},\"247\":{\"score\":100},\"127\":{\"score\":100},\"128\":{\"score\":100},\"129\":{\"score\":100},\"250\":{\"score\":100},\"251\":{\"score\":96},\"252\":{\"score\":100},\"132\":{\"score\":100},\"253\":{\"score\":100},\"134\":{\"score\":100},\"135\":{\"score\":96},\"256\":{\"score\":100},\"137\":{\"score\":100},\"259\":{\"score\":74},\"139\":{\"score\":100},\"30\":{\"score\":43},\"34\":{\"score\":41},\"37\":{\"score\":44},\"39\":{\"score\":43},\"260\":{\"score\":85},\"140\":{\"score\":100},\"141\":{\"score\":97},\"262\":{\"score\":48},\"142\":{\"score\":94},\"265\":{\"score\":60},\"145\":{\"score\":100},\"146\":{\"score\":100},\"147\":{\"score\":100},\"148\":{\"score\":100},\"41\":{\"score\":45},\"43\":{\"score\":46},\"150\":{\"score\":81},\"152\":{\"score\":100},\"153\":{\"score\":87},\"155\":{\"score\":93},\"157\":{\"score\":100},\"158\":{\"score\":81},\"56\":{\"score\":91},\"57\":{\"score\":92},\"58\":{\"score\":95},\"59\":{\"score\":100},\"161\":{\"score\":100},\"162\":{\"score\":100},\"163\":{\"score\":100},\"164\":{\"score\":97},\"167\":{\"score\":82},\"200\":{\"score\":100},\"201\":{\"score\":100},\"169\":{\"score\":84},\"202\":{\"score\":100},\"203\":{\"score\":100},\"204\":{\"score\":100},\"207\":{\"score\":100},\"60\":{\"score\":98},\"208\":{\"score\":100},\"61\":{\"score\":85},\"209\":{\"score\":100},\"69\":{\"score\":58},\"176\":{\"score\":98},\"210\":{\"score\":100},\"178\":{\"score\":93},\"211\":{\"score\":100},\"212\":{\"score\":100},\"214\":{\"score\":100},\"216\":{\"score\":100},\"217\":{\"score\":100},\"70\":{\"score\":92},\"218\":{\"score\":100},\"71\":{\"score\":94},\"219\":{\"score\":100},\"72\":{\"score\":100},\"73\":{\"score\":81},\"74\":{\"score\":100},\"180\":{\"score\":100},\"181\":{\"score\":93},\"182\":{\"score\":66},\"183\":{\"score\":97},\"184\":{\"score\":100},\"186\":{\"score\":100},\"220\":{\"score\":100},\"221\":{\"score\":100},\"101\":{\"score\":99},\"189\":{\"score\":100},\"222\":{\"score\":48},\"103\":{\"score\":100},\"104\":{\"score\":78},\"225\":{\"score\":73},\"105\":{\"score\":100},\"106\":{\"score\":97},\"108\":{\"score\":100},\"109\":{\"score\":100},\"84\":{\"score\":100},\"87\":{\"score\":100}}"
var section_edit_json="{\"44\":[{\"score\":\"1.0\",\"content\":\"SQLite是遵守ACID的关系数据库管理系统，它包含在一个相对小的C程序库中。\"},{\"score\":\"0.81427175\",\"content\":\"与许多其它数据库管理系统不同，SQLite不是一个客户端/服务器结构的数据库引擎，而是被集成在用户程序中。\"}],\"45\":[{\"score\":\"0.0\",\"content\":\"SQLite遵守ACID，实现了大多数SQL标准。\"},{\"score\":\"0.0\",\"content\":\"它使用动态的、弱类型的SQL语法。\"},{\"score\":\"1.0\",\"content\":\"它的设计目标是嵌入式的，而且已经在很多嵌入式产品中使用了它，它占用资源非常的低，\"},{\"score\":\"1.0\",\"content\":\"在嵌入式设备中，可能只需要几百K的内存就够了。\"},{\"score\":\"1.0\",\"content\":\"它能够支持Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，\"},{\"score\":\"0.97333336\",\"content\":\"比如 Tcl、C#、PHP、Java等，还有ODBC接口，同样比起Mysql、PostgreSQL这两款开源的世界著名数据库管理系统来讲，\"},{\"score\":\"0.0\",\"content\":\"它的处理速度比他们都快。\"},{\"score\":\"0.0\",\"content\":\"SQLite第一个Alpha版本诞生于2000年5月。\"},{\"score\":\"0.81693125\",\"content\":\"至2021年已经接近有21个年头，SQLite也迎来了一个版本 SQLite 3已经发布。\"}],\"46\":[{\"score\":\"0.0\",\"content\":\"SQLite具有以下几个特征：\"}],\"47\":[{\"score\":\"0.8417366\",\"content\":\"1. 程序库实现了多数的SQL-92标准，包括事务，以及实现原子性、一致性、隔离性和持久性（即ACID），\"},{\"score\":\"0.0\",\"content\":\"但它缺失了某些特性。\"},{\"score\":\"0.0\",\"content\":\"例如，它仅部分支持触发器。\"},{\"score\":\"0.0\",\"content\":\"尽管它支持大多数的复杂查询，但它的ALTER TABLE功能有所限制，不能修改或删除列，只能通过重新创建表的方式迂回进行。\"}],\"48\":[{\"score\":\"0.0\",\"content\":\"2.\"},{\"score\":\"0.0\",\"content\":\"SQLite不进行类型检查。\"},{\"score\":\"0.0\",\"content\":\"你可以把字符串插入到整数列中。\"},{\"score\":\"0.975\",\"content\":\"某些用户发现这是使数据库更加有用的创新，特别是与无类型的脚本语言一起使用的时候；\"},{\"score\":\"0.0\",\"content\":\"然而其他用户认为这是主要的缺点。\"}],\"49\":[{\"score\":\"0.9259259\",\"content\":\"3. 多个进程或线程可以同时访问同一个数据而没有问题。\"},{\"score\":\"0.0\",\"content\":\"可以同时平行读取同一个数据库。\"},{\"score\":\"1.0\",\"content\":\"但同一时间只能有一个进程或线程进行数据写入；\"},{\"score\":\"0.9310345\",\"content\":\"否则会写入失败并得到一个错误消息（或者会自动重试一段时间；\"},{\"score\":\"0.6611111\",\"content\":\"自动重试的逻辑以及重试时间的长短是可以设置的）。\"}],\"50\":[{\"score\":\"0.9705882\",\"content\":\"SQLite在内部支持Text（文本）、BLOB（大二进制对象）、REAL（浮点数）、INTEGER、NULL这五种数据类型，\"},{\"score\":\"1.0\",\"content\":\"但实际上SQLite完全可以接受其他数据类型，不过在保存的时候会将它们转化为上面的五种数据类型中对应的类型。\"},{\"score\":\"0.0\",\"content\":\"而且SQLite还有一个特点：\"},{\"score\":\"1.0\",\"content\":\"允许各种类型的数据保存到任何类型字段中，开发者可以不用关心声明该字段所使用的数据类型。\"}],\"51\":[{\"score\":\"0.0\",\"content\":\"7  测试\"},{\"score\":\"0.0\",\"content\":\"      7.1  测试原则及测试方法概述\"}],\"52\":[{\"score\":\"1.0\",\"content\":\"软件测试是在软件投入生产性运行之前，对软件进行需求分析、设计规格说明和编码的最终复审，是软件质量控制的关键步骤。\"},{\"score\":\"1.0\",\"content\":\"如果给软件测试下定义的话，可以这样讲，软件测试是为了发现错误而执行程序的过程。\"},{\"score\":\"1.0\",\"content\":\"或者说，软件测试是根据软件开发各阶段的规格说明和程序的内部结构而精心设计一批测试用例，\"},{\"score\":\"1.0\",\"content\":\"并利用这些测试用例去运行程序，以发现程序错误的过程。\"}],\"53\":[{\"score\":\"0.0\",\"content\":\"7.1.1  测试原则\"}],\"10\":[{\"score\":\"0.0\",\"content\":\"7.评分：\"},{\"score\":\"0.0\",\"content\":\"打开设备自带的应用商店，并跳转到本应用的详情，若没有安装应用商店，则进行提示。\"}],\"54\":[{\"score\":\"1.0\",\"content\":\"软件测试是软件开发的重要组成部分，主要原则包括以下：\"}],\"11\":[{\"score\":\"0.0\",\"content\":\"5.8  界面实现\"},{\"score\":\"0.0\",\"content\":\"      6  编码\"},{\"score\":\"0.0\",\"content\":\"      6.1  开发工具及编程语言概述\"},{\"score\":\"0.0\",\"content\":\"      6.1.1  Microsoft Visio Professional简介\"}],\"55\":[{\"score\":\"1.0\",\"content\":\"1.应当把“尽早的和不断的进行软件测试”作为软件开发者的座右铭。\"},{\"score\":\"1.0\",\"content\":\"坚持在软件开发的各个阶段实施技术评审，这样才能在开发过程中尽早的发现和预防错误，把出现的错误克服在早期，以提高软件质量。\"}],\"12\":[{\"score\":\"0.91071427\",\"content\":\"Visio是一款非常便于IT和商务专业人员对于复杂信息、系统和流程进行可视化处理、分析和交流的办公软件。\"},{\"score\":\"0.91517323\",\"content\":\"使用具有专业外观的Visio图表，可以促进对系统和流程的了解，深入了解复杂信息并利用这些知识做出更好的业务决策。\"}],\"56\":[{\"score\":\"1.0\",\"content\":\"2.测试用例由测试输入数据和与之对应的预期输出结果这两部分组成。\"},{\"score\":\"1.0\",\"content\":\"测试以前应该根据测试要求选择测试用例，以备测试过程中使用。\"}],\"13\":[{\"score\":\"0.95348835\",\"content\":\"Visio帮助用户创建具有专业外观的图表，以便理解、记录和分析信息、数据、系统和过程。\"}],\"57\":[{\"score\":\"1.0\",\"content\":\"3.系统的开发人员应该避免参与系统的测试工作。\"},{\"score\":\"1.0\",\"content\":\"同时程序员对软件规格说明理解错误而引入的错误则更难发现。\"}],\"14\":[{\"score\":\"1.0\",\"content\":\"大多数图形软件程序依赖于艺术技能。\"},{\"score\":\"0.9836066\",\"content\":\"然而，在使用Visio时，以可视方式传递重要信息就像打开模板、将形状拖放到绘图中以及对即将完成的工作应用主题一样轻松。\"},{\"score\":\"0.8475762\",\"content\":\"Visio Professional中的新增功能和增强功能使得创建Visio图表更为简单、快捷，令人印象更加深刻。\"}],\"58\":[{\"score\":\"1.0\",\"content\":\"4.在设计测试用例时，应当包括合理的输入条件和不合理的输入条件。\"},{\"score\":\"1.0\",\"content\":\"因此用不合理的输入条件测试程序时，往往比合理的输入条件进行测试发现的问题更多。\"}],\"15\":[{\"score\":\"0.0\",\"content\":\"6.1.2  Sketch简介\"}],\"59\":[{\"score\":\"1.0\",\"content\":\"5.应当对每个测试结果做全面检查，必须对预期的输出结果明确定义，对实测的结果仔细分析检查抓住征候。\"}],\"16\":[{\"score\":\"0.0\",\"content\":\"Sketch是由荷兰公司Sketch BV开发macOS专用的矢量图形编辑器。\"},{\"score\":\"0.0\",\"content\":\"其主要用于网站和移动应用程序的用户界面和用户体验设计，Sketch具有原型设计和协作的功能。\"},{\"score\":\"0.0\",\"content\":\"仅适用于macOS的第三方软件和第三方工具上查看Sketch原型。\"}],\"17\":[{\"score\":\"0.0\",\"content\":\"Sketch软件的特点是容易理解，上手简单，对于有设计经验的设计师来说，入门门槛很低。\"},{\"score\":\"0.0\",\"content\":\"对于绝大多数的数字产品设计，Sketch都能替代，如Adobe Photoshop、Adobe Illustrator等。\"}],\"18\":[{\"score\":\"0.0\",\"content\":\"6.1.3  Android简介\"}],\"19\":[{\"score\":\"0.58408636\",\"content\":\"Android是一个基于Linux内核与其他开源软件的开放源代码的移动操作系统，由谷歌成立的开放手持设备联盟持续领导与开发。\"}],\"1\":[{\"score\":\"0.0\",\"content\":\"5.7  设置模块定义\"},{\"score\":\"0.0\",\"content\":\"      5.7.1  模块定义\"},{\"score\":\"0.0\",\"content\":\"      模块名称：\"},{\"score\":\"0.0\",\"content\":\"设置。\"},{\"score\":\"0.0\",\"content\":\"      模块功能：\"},{\"score\":\"0.0\",\"content\":\"本模块中主要功能有：\"},{\"score\":\"0.0\",\"content\":\"修改用户信息；\"},{\"score\":\"0.0\",\"content\":\"修改物品临期的判断天数；\"},{\"score\":\"0.0\",\"content\":\"住所、房间、家具、容器、种类管理；\"},{\"score\":\"0.0\",\"content\":\"应用密码管理；\"},{\"score\":\"0.0\",\"content\":\"导出物品信息到Excel表格；\"},{\"score\":\"0.0\",\"content\":\"联系开发者；\"},{\"score\":\"0.0\",\"content\":\"评分。\"},{\"score\":\"0.0\",\"content\":\"      5.7.2  输入项目\"}],\"2\":[{\"score\":\"0.0\",\"content\":\"用户头像；\"},{\"score\":\"0.0\",\"content\":\"物品临期的判断天数；\"},{\"score\":\"0.0\",\"content\":\"要创建和修改的住所、房间、家具、容器、种类的信息；\"},{\"score\":\"0.0\",\"content\":\"应用密码。\"}],\"3\":[{\"score\":\"0.0\",\"content\":\"5.7.3  输出项目\"},{\"score\":\"0.0\",\"content\":\"      主要输出项目有：\"},{\"score\":\"0.0\",\"content\":\"住所、房间、家具、容器、种类的列表。\"},{\"score\":\"0.0\",\"content\":\"      5.7.4  程序逻辑\"}],\"4\":[{\"score\":\"0.0\",\"content\":\"1.修改用户信息：\"},{\"score\":\"0.0\",\"content\":\"点击当前用户头像，弹出从相册或相机中选择照片的对话框，点击相册打开系统相册选择照片，点击相机打开系统相机进行拍照。\"},{\"score\":\"0.0\",\"content\":\"之后打开系统的编辑照片，将照片按照用户意愿进行裁剪，点击确定按钮，将照片信息保存到数据库中，\"},{\"score\":\"0.0\",\"content\":\"同时界面中的用户头像刷新为刚才修改的头像。\"}],\"5\":[{\"score\":\"0.0\",\"content\":\"2.修改物品临期的判断天数：\"},{\"score\":\"0.0\",\"content\":\"点击设置项，打开修改物品临期的判断天数的对话框，输入天数，点击保存，即可保存到数据库中，点击取消，关闭对话框。\"}],\"6\":[{\"score\":\"0.0\",\"content\":\"3.住所、房间、家具、容器、种类管理：\"},{\"score\":\"0.0\",\"content\":\"点击对应设置项，打开的界面中显示其列表，在列表项上从右向左划，\"},{\"score\":\"0.43434343\",\"content\":\"显示删除按钮，点击删除按钮，系统会对当前列表进行判断，若删除的是住所，\"},{\"score\":\"0.0\",\"content\":\"则判断是否是当前住所，如果是则提示不能删除当前住所。\"},{\"score\":\"0.0\",\"content\":\"若当前列表中只有1项，删除时会提示列表中至少要保留一项。\"},{\"score\":\"0.0\",\"content\":\"点击列表项打开修改对话框，输入要修改的信息，点击保存按钮，系统对输入信息进行判定，若信息与数据库中的信息重复，\"},{\"score\":\"0.41269842\",\"content\":\"则提示修改失败，否则修改数据库中的对应项，提示修改成功，刷新列表。\"},{\"score\":\"0.0\",\"content\":\"点击取消按钮，关闭对话框。\"},{\"score\":\"0.0\",\"content\":\"点击添加按钮，即可向列表中添加项，输入要添加的信息，点击保存按钮，系统对输入信息进行判定，若信息与数据库中的信息重复，\"},{\"score\":\"0.44179896\",\"content\":\"则提示创建失败，否则创建数据库中的对应项，提示创建成功，刷新列表。\"}],\"7\":[{\"score\":\"0.0\",\"content\":\"4.应用密码管理：\"},{\"score\":\"0.42640695\",\"content\":\"若当前没有密码，打开本设置会提示创建密码，若两次密码一致则创建成功，若不一致则需要修改。\"},{\"score\":\"0.0\",\"content\":\"若当前存在密码，打开本设置会提示输入密码，做输入错误，则提示错误，否则进入新界面。\"},{\"score\":\"0.45079365\",\"content\":\"点击关闭密码即可清空当前密码，点击修改密码则输入新密码后即可修改成功。\"},{\"score\":\"0.0\",\"content\":\"在存在密码的情况下，用户不能进行注销操作，若退出应用，则再次进入时需要输入正确的密码，\"},{\"score\":\"0.45833334\",\"content\":\"若密码输入不正确则提示错误，一共有5次输入密码的机会，5次机会全部用完，\"},{\"score\":\"0.0\",\"content\":\"则应用被锁定，只有清除所有数据才能继续使用。\"}],\"8\":[{\"score\":\"0.0\",\"content\":\"5.导出物品信息到Excel表格：\"},{\"score\":\"0.0\",\"content\":\"在用户设备的根目录里创建Excel文档，将当前用户去除图片的所有物品信息导出到该文档中。\"}],\"9\":[{\"score\":\"0.0\",\"content\":\"6.联系开发者：\"},{\"score\":\"0.0\",\"content\":\"打开设备自带的邮件应用，若没有安装邮件应用，则进行提示；\"},{\"score\":\"0.0\",\"content\":\"若已经按照，则自动按照指定模板创建新邮件，待用户完善内容即可发送给开发者。\"}],\"60\":[{\"score\":\"1.0\",\"content\":\"6.并要认真的妥善保存测试计划，测试用例，出错统计和最终的分析报告，为后期的维护提供方便。\"}],\"61\":[{\"score\":\"0.0\",\"content\":\"7.1.2  测试方法\"}],\"62\":[{\"score\":\"0.0\",\"content\":\"黑盒测试：\"},{\"score\":\"1.0\",\"content\":\"黑盒测试是以用户的角度，从输入数据与输出数据的对应关系出发进行测试的。\"},{\"score\":\"1.0\",\"content\":\"很明显，如果外部特性本身设计有问题或规格说明的规定有误，用黑盒测试方法是发现不了的。\"},{\"score\":\"1.0\",\"content\":\"从理论上讲，黑盒测试只有采用穷举输入测试，把所有可能的输入都作为测试情况考虑，才能查出程序中所有的错误。\"},{\"score\":\"1.0\",\"content\":\"实际上测试情况有无穷多个，人们不仅要测试所有合法的输入，而且还要对那些不合法但可能的输入进行测试。\"},{\"score\":\"1.0\",\"content\":\"这样看来，完全测试是不可能的，所以我们要进行有针对性的测试，通过制定测试案例指导测试的实施，\"},{\"score\":\"1.0\",\"content\":\"保证软件测试有组织、按步骤，以及有计划地进行。\"}],\"63\":[{\"score\":\"0.0\",\"content\":\"白盒测试：\"},{\"score\":\"1.0\",\"content\":\"又称透明盒测试、结构测试、逻辑驱动测试或基于代码的测试。\"},{\"score\":\"0.0\",\"content\":\"“白盒”法是穷举路径测试。\"},{\"score\":\"1.0\",\"content\":\"在使用这一方案时，测试者必须检查程序的内部结构，从检查程序的逻辑着手，得出测试数据。\"},{\"score\":\"1.0\",\"content\":\"白盒测试的测试方法有代码检查法、静态结构分析法、静态质量度量法、\"},{\"score\":\"1.0\",\"content\":\"逻辑覆盖法、基本路径测试法、域测试、符号测试、路径覆盖和程序变异。\"},{\"score\":\"1.0\",\"content\":\"白盒测试是一种测试用例设计方法，盒子指的是被测试的软件，\"},{\"score\":\"1.0\",\"content\":\"白盒指的是盒子是可视的，你清楚盒子内部的东西以及里面是如何运作的。\"},{\"score\":\"1.0\",\"content\":\"“白盒”法全面了解程序内部逻辑结构、对所有逻辑路径进行测试。\"}],\"20\":[{\"score\":\"0.91803277\",\"content\":\"Android的核心基于Linux，除了核心之外，则是中介层、数据库元和用C/C++编写的API以及应用程序框架。\"},{\"score\":\"0.9431818\",\"content\":\"Android的应用程序通常以Java数据库元为基础编写，运行程序时，应用程序的代码会被即时转变为Dalvik dex-code（Dalvik Executable），\"},{\"score\":\"1.0\",\"content\":\"然后Android操作系统通过使用即时编译的Dalvik虚拟机来将其运行。\"}],\"64\":[{\"score\":\"0.48055553\",\"content\":\"本系统主要采用黑盒测试，着重测试软件的功能，力图在测试过程中发现下述类型的错误：\"}],\"21\":[{\"score\":\"0.81150794\",\"content\":\"目前Android的Linux kernel控制包括安全、存储器管理、进程管理、网络堆栈、驱动程序模型等。\"},{\"score\":\"1.0\",\"content\":\"下载Android源码之前，先要安装其构建工具Repo来初始化源码。\"},{\"score\":\"0.0\",\"content\":\"Repo是Android用来辅助Git工作的一个工具。\"}],\"65\":[{\"score\":\"0.0\",\"content\":\"（1）功能错误或遗漏功能。\"},{\"score\":\"0.0\",\"content\":\"      （2）界面显示错误。\"}],\"22\":[{\"score\":\"0.0\",\"content\":\"Android开发四大组件分别是：\"},{\"score\":\"0.0\",\"content\":\"活动（Activity）：\"},{\"score\":\"0.0\",\"content\":\"用于表现功能。\"},{\"score\":\"0.0\",\"content\":\"服务（Service）：\"},{\"score\":\"0.0\",\"content\":\"后台运行服务，不提供界面呈现。\"},{\"score\":\"0.0\",\"content\":\"广播接收器（BroadcastReceiver）：\"},{\"score\":\"0.0\",\"content\":\"用于接收广播。\"},{\"score\":\"0.0\",\"content\":\"内容提供商（Content Provider）：\"},{\"score\":\"1.0\",\"content\":\"支持在多个应用中存储和读取数据，相当于数据库。\"}],\"66\":[{\"score\":\"0.73391813\",\"content\":\"（3）数据结构错误或外部数据访问错误。\"}],\"23\":[{\"score\":\"0.0\",\"content\":\"Android应用组件有以下4种：\"},{\"score\":\"0.0\",\"content\":\"      1.活动\"}],\"67\":[{\"score\":\"0.0\",\"content\":\"（4）性能错误。\"},{\"score\":\"0.0\",\"content\":\"      （5）初始化和终止错误。\"},{\"score\":\"0.0\",\"content\":\"      7.2  测试项目测试用例\"},{\"score\":\"0.0\",\"content\":\"      7.3  软件测试结论\"},{\"score\":\"0.0\",\"content\":\"      7.3.1  软件能力\"}],\"24\":[{\"score\":\"1.0\",\"content\":\"Android 中，Activity是所有程序的根本，所有程序的流程都运行在Activity 之中，Activity可以算是开发者遇到的最频繁，也是Android 当中最基本的模块之一。\"},{\"score\":\"1.0\",\"content\":\"在Android的程序当中，Activity 一般代表手机屏幕的一屏。\"},{\"score\":\"1.0\",\"content\":\"如果把手机比作一个浏览器，那么Activity就相当于一个网页。\"},{\"score\":\"0.0\",\"content\":\"在Activity 当中可以添加一些Button、CheckBox 等控件。\"},{\"score\":\"0.0\",\"content\":\"可以看到Activity 概念和网页的概念相当类似。\"}],\"68\":[{\"score\":\"0.7463203\",\"content\":\"根据物品管理App系统的测试结果所示，该App可以运行在Android 9及更新版本的手机系统上正常运行。\"},{\"score\":\"0.97959185\",\"content\":\"该手机App服务对象主要是某高校葫芦岛校区的在校学生，用户可以实现教学信息的查询和周边生活服务。\"}],\"25\":[{\"score\":\"0.0\",\"content\":\"一般一个Android 应用是由多个Activity 组成的。\"},{\"score\":\"1.0\",\"content\":\"这多个Activity 之间可以进行相互跳转，例如，按下一个Button按钮后，可能会跳转到其他的Activity。\"},{\"score\":\"1.0\",\"content\":\"和网页跳转稍微有些不一样的是，Activity 之间的跳转有可能返回值，例如，从Activity A 跳转到Activity B，\"},{\"score\":\"1.0\",\"content\":\"那么当Activity B 运行结束的时候，有可能会给Activity A 一个返回值。\"},{\"score\":\"0.0\",\"content\":\"这样做在很多时候是相当方便的。\"}],\"69\":[{\"score\":\"0.0\",\"content\":\"7.3.2  缺陷和限制\"}],\"26\":[{\"score\":\"1.0\",\"content\":\"当打开一个新的屏幕时，之前一个屏幕会被置为暂停状态，并且压入历史堆栈中。\"},{\"score\":\"1.0\",\"content\":\"用户可以通过回退操作返回到以前打开过的屏幕。\"},{\"score\":\"1.0\",\"content\":\"可以选择性的移除一些没有必要保留的屏幕，因为Android会把每个应用的开始到当前的每个屏幕保存在堆栈中。\"}],\"27\":[{\"score\":\"0.0\",\"content\":\"2.服务\"}],\"28\":[{\"score\":\"0.9864865\",\"content\":\"Service 是android 系统中的一种组件，它跟Activity 的级别差不多，但是它不能自己运行，只能后台运行，并且可以和其他组件进行交互。\"},{\"score\":\"0.0\",\"content\":\"Service 是没有界面的长生命周期的代码。\"},{\"score\":\"1.0\",\"content\":\"Service是一种程序，它可以运行很长时间，但是它却没有用户界面。\"},{\"score\":\"0.7835126\",\"content\":\"比如音乐的后台播放，就是由播放音乐的Service进行控制。\"},{\"score\":\"1.0\",\"content\":\"Service 可以在和多场合的应用中使用，比如播放多媒体的时候用户启动了其他Activity这个时候程序要在后台继续播放，\"},{\"score\":\"0.9714286\",\"content\":\"比如检测SD 卡上文件的变化，再或者在后台记录地理信息位置的改变等等。\"}],\"29\":[{\"score\":\"0.0\",\"content\":\"3.广播接收器\"}],\"70\":[{\"score\":\"0.58850574\",\"content\":\"由于技术和时间的限制，系统使用了本地数据库SQLite。\"},{\"score\":\"0.57120746\",\"content\":\"本系统的UI展示简约美观，但部分界面还有待添加自定义动画，没有经过美工进行UI设计和提供UI图片，界面美化成都还有较大程度的提高。\"},{\"score\":\"0.0\",\"content\":\"还应该进一步优化内存和功能。\"}],\"71\":[{\"score\":\"0.0\",\"content\":\"7.3.3  测试结论\"},{\"score\":\"0.0\",\"content\":\"      结  论\"}],\"72\":[{\"score\":\"0.6062378\",\"content\":\"在本论文中主要阐述了生活中物品浪费的问题，并简要的介绍了解决问题的思路，在此基础上开发了基于Android平台的物品管理App。\"},{\"score\":\"0.9019608\",\"content\":\"在本论文中详细的介绍了物品管理App系统实现需要的技术、系统总体需求、系统模块设计和具体实现的过程。\"}],\"73\":[{\"score\":\"0.85303026\",\"content\":\"本文详细概述了物品管理App的概念设计和详细设计以及开发过程所用的语言和工具。\"},{\"score\":\"0.9705882\",\"content\":\"系统划分了四个小模块，对于不同的系统模块的开发进行了技术选型和实现。\"}],\"30\":[{\"score\":\"1.0\",\"content\":\"在Android 中，Broadcast是一种广泛运用的在应用程序之间传输信息的机制。\"},{\"score\":\"1.0\",\"content\":\"而BroadcastReceiver 是对发送出来的Broadcast进行过滤接受并响应的一类组件。\"},{\"score\":\"1.0\",\"content\":\"可以使用BroadcastReceiver 来让应用对一个外部的事件做出响应。\"},{\"score\":\"1.0\",\"content\":\"这是非常有意思的，例如，当电话呼入这个外部事件到来的时候，可以利用BroadcastReceiver 进行处理。\"},{\"score\":\"1.0\",\"content\":\"例如，当下载一个程序成功完成的时候，仍然可以利用BroadcastReceiver 进行处理。\"},{\"score\":\"1.0\",\"content\":\"BroadcastReceiver不能生成UI，也就是说对于用户来说不是透明的，用户是看不到的。\"},{\"score\":\"0.0\",\"content\":\"BroadcastReceiver通过NotificationManager 来通知用户这些事情发生了。\"},{\"score\":\"0.0\",\"content\":\"BroadcastReceiver 既可以在AndroidManifest.xml 中注册，也可以在运行时的代码中使用Context.registerReceiver进行注册。\"},{\"score\":\"1.0\",\"content\":\"只要是注册了，当事件来临的时候，即使程序没有启动，系统也在需要的时候启动程序。\"},{\"score\":\"0.9411765\",\"content\":\"各种应用还可以通过使用Context.sendBroadcast将它们自己的Intent Broadcasts广播给其他应用程序。\"}],\"74\":[{\"score\":\"0.0\",\"content\":\"虽然本论文基本上实现了预定的计划和目标，但经过用户使用后的反馈，无论是从功能上还是从界面上，还有较大空间进行改进。\"},{\"score\":\"1.0\",\"content\":\"因此，在本系统的基础上，未来的研究与提升的方向主要有以下方面：\"}],\"31\":[{\"score\":\"0.0\",\"content\":\"4.内容提供者\"}],\"75\":[{\"score\":\"0.0\",\"content\":\"（1）创建应用的服务器，使应用能实现云备份和云恢复的功能。\"}],\"32\":[{\"score\":\"1.0\",\"content\":\"Content Provider 是Android提供的第三方应用数据的访问方案。\"}],\"76\":[{\"score\":\"0.0\",\"content\":\"（2）增加从表格中导入物品信息的功能。\"}],\"33\":[{\"score\":\"1.0\",\"content\":\"在Android中，对数据的保护是很严密的，除了放在SD卡中的数据，\"},{\"score\":\"0.8947368\",\"content\":\"一个应用所持有的数据库、文件等内容，都是不允许其他直接访问的 [14]  。\"},{\"score\":\"0.9672131\",\"content\":\"Android当然不会真的把每个应用都做成一座孤岛，它为所有应用都准备了一扇窗，这就是Content Provider。\"},{\"score\":\"1.0\",\"content\":\"应用想对外提供的数据，可以通过派生Content Provider类， 封装成一枚Content Provider，每个Content Provider都用一个uri作为独立的标识，形如：\"},{\"score\":\"0.0\",\"content\":\"content:\"},{\"score\":\"0.0\",\"content\":\"//com.xxxxx。\"},{\"score\":\"0.0\",\"content\":\"所有东西看着像REST的样子，但实际上，它比REST 更为灵活。\"},{\"score\":\"1.0\",\"content\":\"和REST类似，uri也可以有两种类型，一种是带id的，另一种是列表的，\"},{\"score\":\"1.0\",\"content\":\"但实现者不需要按照这个模式来做，给id的uri也可以返回列表类型的数据，\"},{\"score\":\"1.0\",\"content\":\"只要调用者明白，就无妨，不用苛求所谓的REST。\"}],\"77\":[{\"score\":\"1.0\",\"content\":\"（3）在Android开发这方便自己还属于入门者，需要不断深入学习，丰富项目开发经历，为即将到来的就业打下基础。\"}],\"34\":[{\"score\":\"0.0\",\"content\":\"Android具有开发、硬件丰富、方便开发等平台优势。\"}],\"78\":[{\"score\":\"0.0\",\"content\":\"（4）深入了解安卓应用商店上架App的知识。\"}],\"35\":[{\"score\":\"0.0\",\"content\":\"6.1.4  Java简介\"}],\"79\":[{\"score\":\"0.0\",\"content\":\"（5）开发其他平台的版本。\"}],\"36\":[{\"score\":\"1.0\",\"content\":\"Java是一种广泛使用的计算机编程语言，拥有跨平台、面向对象、泛型编程的特性，广泛应用于企业级Web应用开发和移动应用开发。\"}],\"37\":[{\"score\":\"0.0\",\"content\":\"Java编程语言的风格十分接近C++语言。\"},{\"score\":\"1.0\",\"content\":\"继承了C++语言面向对象技术的核心，舍弃了容易引起错误的指针，以引用取代；\"},{\"score\":\"0.96428573\",\"content\":\"移除了C++中的运算符重载和多重继承特性，用接口取代；\"},{\"score\":\"0.0\",\"content\":\"增加垃圾回收器功能。\"},{\"score\":\"1.0\",\"content\":\"在Java SE 1.5版本中引入了泛型编程、类型安全的枚举、不定长参数和自动装/拆箱特性。\"},{\"score\":\"0.0\",\"content\":\"Sun微系统对Java语言的解释是：\"},{\"score\":\"1.0\",\"content\":\"“Java编程语言是个简单、面向对象、分布式、解释性、健壮、安全与系统无关、可移植、高性能、多线程和动态的语言”。\"}],\"38\":[{\"score\":\"1.0\",\"content\":\"Java不同于一般的编译语言或解释型语言。\"},{\"score\":\"0.9661017\",\"content\":\"它首先将源代码编译成字节码，再依赖各种不同平台上的虚拟机来解释执行字节码，从而具有“一次编写，到处运行”的跨平台特性。\"},{\"score\":\"0.9375\",\"content\":\"在早期JVM中，这在一定程度上降低了Java程序的运行效率。\"},{\"score\":\"0.0\",\"content\":\"但在J2SE1.4.2发布后，Java的运行速度有了大幅提升。\"}],\"39\":[{\"score\":\"0.0\",\"content\":\"Java平台由Java虚拟机（Java Virtual Machine）和Java应用编程接口（Application Programming Interface、简称API）构成。\"},{\"score\":\"1.0\",\"content\":\"Java应用编程接口为Java应用提供了一个独立于操作系统的标准接口，可分为基本部分和扩展部分。\"},{\"score\":\"1.0\",\"content\":\"在硬件或操作系统平台上安装一个Java平台之后，Java应用程序就可运行。\"},{\"score\":\"1.0\",\"content\":\"现在Java平台已经嵌入了几乎所有的操作系统。\"},{\"score\":\"1.0\",\"content\":\"这样Java程序可以只编译一次，就可以在各种系统中运行。\"},{\"score\":\"0.0\",\"content\":\"目前常用的Java平台基于Java 1.8，最新版本为Java 16。\"}],\"80\":[{\"score\":\"1.0\",\"content\":\"很想说毕业设计是份折磨也是份收获，利用大学生涯的最后一次考核毕业设计，此次毕业设计的选题与技术让我又重新回顾了一遍Android，\"},{\"score\":\"0.96\",\"content\":\"让我能够温故而新，使以前不清楚的知识点豁然开朗，自己将来想要从事的工作是Android开发工程师，\"},{\"score\":\"1.0\",\"content\":\"这也为我将来走上工作岗位打下了一定的基础。\"},{\"score\":\"1.0\",\"content\":\"在毕业设计的写作过程中提高了我对办公软件的使用，对于大学最后一次考核我会很认真的对待圆满的完成，\"},{\"score\":\"0.0\",\"content\":\"为我的大学生涯画下一个句号。\"}],\"81\":[{\"score\":\"0.0\",\"content\":\"致  谢\"}],\"82\":[{\"score\":\"1.0\",\"content\":\"路漫漫其修远兮，吾将上下而求索。\"},{\"score\":\"0.0\",\"content\":\"行文至此，落笔为终。\"},{\"score\":\"0.0\",\"content\":\"转眼间已经到了毕业设计作品的最后一步，大学四年的学习生涯即将结束，始于2017年秋，终于2021年夏，目之所及，皆是回忆。\"},{\"score\":\"0.74206346\",\"content\":\"在这四年里自己经历了许多，曾经也得到过不少老师、同学和朋友们的无私帮助和热情关怀，\"},{\"score\":\"0.84619594\",\"content\":\"在此谨向我亲爱的老师们和朋友们表示衷心的感谢和诚挚的谢意。\"}],\"83\":[{\"score\":\"0.0\",\"content\":\"有师如斯，庆幸之至，感谢我的论文指导老师韩老师，亦师亦友，本作品的顺利完成，离不开老师的耐心指导。\"},{\"score\":\"0.48423424\",\"content\":\"韩老师严谨的治学态度、严密的思维逻辑和博学的专业知识，使我感到由衷的钦佩。\"},{\"score\":\"0.0\",\"content\":\"在此也要感谢我本科四年所有指导我和教育我的老师们，是你们教会了我专业知识和人生的道理。\"},{\"score\":\"0.0\",\"content\":\"祝愿老师们工作顺利、平安幸福。\"}],\"40\":[{\"score\":\"0.8083671\",\"content\":\"Java语言具有简单性、面向对象、分布性、编译和解释性、稳健性、安全性、可移植性、高性能、多线程性、动态性等特点。\"}],\"84\":[{\"score\":\"0.6017316\",\"content\":\"感谢我的父母和家人对我无微不至的照顾与支持。\"},{\"score\":\"0.0\",\"content\":\"养育之恩，无法回报，只想不断努力，成为他们的骄傲。\"}],\"41\":[{\"score\":\"0.0\",\"content\":\"6.1.5  Android Studio简介\"}],\"85\":[{\"score\":\"0.0\",\"content\":\"送君千里，终有一别。\"},{\"score\":\"0.0\",\"content\":\"感谢所有的相遇，山高路远，我们更高处相见！\"}],\"42\":[{\"score\":\"1.0\",\"content\":\"Android Studio是一个为Android平台开发程序的集成开发环境。\"},{\"score\":\"0.8730159\",\"content\":\"2013年5月16日在Google I/O上发布，可供开发者免费使用。\"},{\"score\":\"0.0\",\"content\":\"Android Studio基于JetBrains IntelliJ IDEA，为Android开发特殊定制，并在Windows、macOS和Linux平台上均可运行。\"},{\"score\":\"0.9285714\",\"content\":\"Android Studio 提供了集成的 Android 开发工具用于开发和调试。\"}],\"43\":[{\"score\":\"0.0\",\"content\":\"6.1.6  SQLite简介\"}]}"
var suggestion_json="[{\"id\":\"revise_0\",\"suggestionType\":\"punctuation\",\"originText\":\"5.7\",\"startPos\":0,\"endPos\":3,\"suggestionWord\":\"\",\"suggestionMsg\":\"检查序号是否有序\",\"actionType\":\"replace\",\"duplicateData\":[],\"blankList\":[],\"ignore\":false},{\"id\":\"revise_1\",\"suggestionType\":\"punctuation\",\"originText\":\"5.8\",\"startPos\":1174,\"endPos\":1177,\"suggestionWord\":\"\",\"suggestionMsg\":\"检查序号是否有序\",\"actionType\":\"replace\",\"duplicateData\":[],\"blankList\":[],\"ignore\":false},{\"id\":\"revise_2\",\"suggestionType\":\"punctuation\",\"originText\":\"6\",\"startPos\":1184,\"endPos\":1185,\"suggestionWord\":\"\",\"suggestionMsg\":\"检查序号是否有序\",\"actionType\":\"replace\",\"duplicateData\":[],\"blankList\":[],\"ignore\":false}]"
var proof_detail_json="[]"
var is_has_word = true;
var revise_is_has_word  = true;
var revise_is_has_text  = true;